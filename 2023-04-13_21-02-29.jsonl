{"code": "\nclass Solution():\n\n    def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:\n        \"\\n    You are given an integer n and an integer p in the range [0, n - 1]. Representing a 0-indexed array arr\\xa0of length n where all positions are set to 0's, except position p which is set to 1.\\n    You are also given an integer array banned containing some positions from the array. For the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.\\n    You can perform multiple operations on arr. In an operation, you can choose a subarray with size k and reverse the subarray. However, the 1 in arr should never go to any of the positions in banned. In other words, after each operation arr[banned[i]] remains 0.\\n    Return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.\\n    A subarray is a contiguous non-empty sequence of elements within an array.\\n    The values of ans[i] are independent for all i's.\\n    The reverse of an array is an array containing the values in reverse order.\\n    \"\n        from typing import List\n        ans = ([(- 1)] * n)\n        banned_set = set(banned)\n        for i in range(n):\n            if ((i == p) or (i in banned_set)):\n                continue\n            distance = abs((i - p))\n            if ((distance % k) == 0):\n                operations = (distance // k)\n                valid = True\n                for j in range(p, i, (k if (i > p) else (- k))):\n                    if (j in banned_set):\n                        valid = False\n                        break\n                if valid:\n                    ans[i] = operations\n        ans[p] = 0\n        return ans\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 0, "question_id": "2726", "elapsed_time": 11006, "compare_resultcode_output": "[0,-1,-1,-1]", "std_output": "", "last_testcase": "4\n0\n[1,2]\n4", "expected_output": "[0,-1,-1,1]", "task_finish_time": 1681434188967, "total_correct": 355, "total_testcases": 711, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "933354616", "input_formatted": "4, 0, [1,2], 4", "input": "4\n0\n[1,2]\n4", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def collectTheCoins(self, coins: List[int], edges: List[List[int]]) -> int:\n        '\\n    There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given\\xa0an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.\\n    Initially, you choose to start at any vertex in\\xa0the tree.\\xa0Then, you can perform\\xa0the following operations any number of times:\\n    Collect all the coins that are at a distance of at most 2 from the current vertex, or\\n    Move to any adjacent vertex in the tree.\\n    Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.\\n    Note that if you pass an edge several times, you need to count it into the answer several times.\\n    '\n        from collections import defaultdict\n        from typing import List\n\n        def dfs(node: int, parent: int) -> int:\n            total = 0\n            for neighbor in graph[node]:\n                if (neighbor != parent):\n                    total += dfs(neighbor, node)\n            if (coins[node] == 1):\n                total += 1\n            return total\n        graph = defaultdict(list)\n        for edge in edges:\n            graph[edge[0]].append(edge[1])\n            graph[edge[1]].append(edge[0])\n        max_coins = 0\n        for node in range(len(coins)):\n            if (coins[node] == 1):\n                max_coins = max(max_coins, dfs(node, (- 1)))\n        return (2 * (max_coins - 1))\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 0, "question_id": "2717", "elapsed_time": 11009, "compare_resultcode_output": "4", "std_output": "", "last_testcase": "[0,0,0,1,1,0,0,1]\n[[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]", "expected_output": "2", "task_finish_time": 1681434234081, "total_correct": 67, "total_testcases": 4986, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "933354836", "input_formatted": "[0,0,0,1,1,0,0,1], [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]", "input": "[0,0,0,1,1,0,0,1]\n[[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
{"code": "\nclass Solution():\n\n    def minimumTime(self, grid: List[List[int]]) -> int:\n        '\\n    You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].\\n    You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\\n    Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\\n    '\n        from heapq import heappush, heappop\n        from typing import List\n        (m, n) = (len(grid), len(grid[0]))\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        directions = [(0, 1), (1, 0), (0, (- 1)), ((- 1), 0)]\n        queue = [(grid[0][0], 0, 0)]\n        while queue:\n            (time, x, y) = heappop(queue)\n            if ((x == (m - 1)) and (y == (n - 1))):\n                return time\n            for (dx, dy) in directions:\n                (nx, ny) = ((x + dx), (y + dy))\n                if ((0 <= nx < m) and (0 <= ny < n) and (not visited[nx][ny])):\n                    visited[nx][ny] = True\n                    heappush(queue, (max(time, grid[nx][ny]), nx, ny))\n        return (- 1)\n", "status": "Wrong Answer", "reward": false, "info": {"status_code": 11, "lang": "python3", "run_success": true, "status_runtime": "N/A", "memory": 28948000, "question_id": "2711", "elapsed_time": 1975, "compare_result": "00000000000000000000001000000000100000000", "code_output": "6", "std_output": "", "last_testcase": "[[0,1,3,2],[5,1,2,5],[4,3,8,6]]", "expected_output": "7", "task_finish_time": 1681434279904, "total_correct": 2, "total_testcases": 41, "runtime_percentile": null, "status_memory": "N/A", "memory_percentile": null, "pretty_lang": "Python3", "submission_id": "933355031", "input_formatted": "[[0,1,3,2],[5,1,2,5],[4,3,8,6]]", "input": "[[0,1,3,2],[5,1,2,5],[4,3,8,6]]", "status_msg": "Wrong Answer", "state": "SUCCESS"}}
